use std::cmp::Ordering;
use std::collections::BinaryHeap;

#[derive(Copy, Clone, Eq, PartialEq)]
struct State {
    cost: usize,
    position: usize,
}

// The priority queue depends on `Ord`.
// Explicitly implement the trait so the queue becomes a min-heap
// instead of a max-heap.
impl Ord for State {
    fn cmp(&self, other: &Self) -> Ordering {
        // Notice that the we flip the ordering on costs.
        // In case of a tie we compare positions - this step is necessary
        // to make implementations of `PartialEq` and `Ord` consistent.
        other
            .cost
            .cmp(&self.cost)
            .then_with(|| self.position.cmp(&other.position))
    }
}

// `PartialOrd` needs to be implemented as well.
impl PartialOrd for State {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

// Each node is represented as a `usize`, for a shorter implementation.
#[derive(Clone)]
struct Edge {
    node: usize,
    cost: usize,
}

// Dijkstra's shortest path algorithm.

// Start at `start` and use `dist` to track the current shortest distance
// to each node. This implementation isn't memory-efficient as it may leave duplicate
// nodes in the queue. It also uses `usize::MAX` as a sentinel value,
// for a simpler implementation.
fn shortest_path(adj_list: &Vec<Vec<Edge>>, start: usize, end: usize) -> usize {
    // dist[node] = current shortest distance from `start` to `node`
    let mut dist: Vec<_> = (0..adj_list.len()).map(|_| usize::MAX).collect();
    let mut prev: Vec<_> = (0..adj_list.len()).map(|_| None).collect();

    let mut heap = BinaryHeap::new();

    // We're at `start`, with a zero cost
    dist[start] = 0;
    heap.push(State {
        cost: 0,
        position: start,
    });

    // Examine the frontier with lower cost nodes first (min-heap)
    while let Some(State { cost, position }) = heap.pop() {
        // Important as we may have already found a better way
        if cost > dist[position] {
            continue;
        }

        // For each node we can reach, see if we can find a way with
        // a lower cost going through this node
        for edge in &adj_list[position] {
            let next = State {
                cost: cost + edge.cost,
                position: edge.node,
            };

            // If so, add it to the frontier and continue
            if next.cost < dist[next.position] {
                heap.push(next);
                // Relaxation, we have now found a better way
                dist[next.position] = next.cost;
                prev[next.position] = Some((position, edge.cost));
            }
        }
    }

    let mut total_cost = 0;
    let mut current = end;
    loop {
        // println!("{:?}", current);
        if current == start {
            break;
        }
        let (next, cost) = prev[current].unwrap();
        total_cost += cost;
        current = next;
    }
    total_cost
}

fn main() {
    let risks = vec![
        // vec![1, 2],
        // vec![3, 4],
        // vec![1, 1, 6, 3, 7, 5, 1, 7, 4, 2],
        // vec![1, 3, 8, 1, 3, 7, 3, 6, 7, 2],
        // vec![2, 1, 3, 6, 5, 1, 1, 3, 2, 8],
        // vec![3, 6, 9, 4, 9, 3, 1, 5, 6, 9],
        // vec![7, 4, 6, 3, 4, 1, 7, 1, 1, 1],
        // vec![1, 3, 1, 9, 1, 2, 8, 1, 3, 7],
        // vec![1, 3, 5, 9, 9, 1, 2, 4, 2, 1],
        // vec![3, 1, 2, 5, 4, 2, 1, 6, 3, 9],
        // vec![1, 2, 9, 3, 1, 3, 8, 5, 2, 1],
        // vec![2, 3, 1, 1, 9, 4, 4, 5, 8, 1],
        vec![
            4, 6, 4, 4, 1, 9, 1, 1, 7, 1, 3, 3, 7, 7, 3, 2, 1, 4, 3, 7, 1, 2, 1, 8, 6, 1, 2, 4, 2,
            3, 3, 5, 7, 3, 9, 6, 9, 3, 2, 2, 3, 1, 9, 9, 9, 7, 1, 4, 9, 3, 4, 3, 2, 2, 1, 5, 4, 2,
            3, 2, 3, 2, 1, 1, 3, 2, 1, 2, 1, 2, 1, 6, 9, 1, 4, 2, 2, 3, 1, 2, 3, 5, 6, 1, 9, 9, 6,
            9, 7, 3, 9, 4, 8, 3, 7, 9, 2, 4, 7, 1,
        ],
        vec![
            2, 2, 2, 1, 2, 9, 3, 3, 9, 2, 9, 1, 1, 3, 7, 1, 4, 1, 1, 5, 9, 3, 6, 3, 9, 9, 6, 2, 9,
            5, 1, 1, 4, 1, 7, 5, 2, 8, 1, 3, 3, 1, 3, 9, 2, 1, 3, 5, 7, 1, 2, 9, 6, 1, 3, 9, 3, 8,
            9, 3, 1, 5, 3, 3, 6, 2, 1, 9, 1, 8, 5, 8, 3, 6, 8, 3, 1, 3, 4, 1, 5, 2, 9, 6, 5, 4, 9,
            2, 6, 4, 6, 6, 4, 2, 5, 3, 8, 1, 1, 6,
        ],
        vec![
            2, 7, 9, 5, 7, 9, 1, 2, 9, 7, 5, 5, 5, 3, 1, 3, 4, 1, 1, 3, 8, 2, 7, 6, 1, 8, 2, 5, 5,
            6, 7, 3, 3, 1, 4, 7, 1, 8, 1, 9, 2, 1, 2, 3, 1, 5, 3, 4, 1, 8, 2, 5, 9, 1, 1, 2, 3, 2,
            9, 4, 3, 1, 5, 1, 9, 3, 6, 4, 1, 5, 2, 1, 8, 1, 1, 9, 3, 2, 1, 5, 1, 3, 1, 2, 1, 9, 1,
            6, 9, 1, 2, 2, 6, 1, 6, 9, 7, 5, 9, 7,
        ],
        vec![
            1, 2, 1, 4, 5, 3, 7, 6, 1, 3, 9, 9, 2, 1, 2, 5, 7, 1, 2, 3, 8, 2, 2, 3, 3, 9, 1, 6, 9,
            3, 7, 2, 6, 4, 8, 8, 5, 9, 3, 8, 5, 4, 9, 1, 3, 1, 3, 3, 2, 8, 7, 6, 3, 9, 1, 6, 4, 6,
            1, 1, 2, 2, 2, 1, 2, 1, 3, 1, 4, 4, 2, 4, 2, 1, 2, 6, 2, 8, 7, 7, 1, 4, 5, 1, 6, 4, 3,
            6, 1, 1, 9, 1, 9, 1, 9, 1, 7, 3, 6, 2,
        ],
        vec![
            1, 4, 1, 2, 8, 1, 1, 5, 1, 5, 3, 2, 1, 2, 2, 1, 1, 1, 1, 4, 3, 9, 1, 8, 2, 4, 6, 4, 2,
            2, 1, 3, 3, 1, 3, 2, 9, 9, 7, 4, 2, 8, 3, 6, 2, 3, 9, 7, 4, 2, 4, 1, 1, 1, 3, 5, 4, 8,
            4, 2, 7, 1, 2, 8, 4, 2, 2, 1, 1, 2, 1, 9, 2, 1, 1, 8, 9, 8, 3, 3, 8, 4, 4, 6, 3, 2, 3,
            2, 1, 2, 1, 8, 4, 3, 1, 2, 1, 1, 4, 1,
        ],
        vec![
            3, 2, 4, 5, 2, 5, 5, 6, 7, 5, 4, 1, 2, 3, 5, 1, 9, 9, 1, 1, 9, 1, 2, 5, 9, 5, 9, 1, 5,
            6, 1, 1, 1, 1, 9, 9, 1, 2, 2, 1, 2, 6, 5, 2, 1, 4, 2, 2, 1, 2, 9, 1, 1, 7, 5, 1, 3, 7,
            1, 6, 5, 2, 9, 9, 3, 7, 3, 3, 7, 9, 8, 2, 1, 3, 2, 3, 1, 4, 2, 9, 5, 1, 7, 1, 9, 3, 9,
            3, 6, 2, 4, 4, 9, 6, 3, 5, 5, 1, 7, 3,
        ],
        vec![
            7, 8, 2, 1, 6, 3, 6, 4, 3, 9, 1, 3, 7, 1, 1, 4, 4, 5, 4, 8, 1, 5, 2, 3, 4, 1, 8, 4, 4,
            3, 1, 1, 3, 1, 1, 5, 1, 8, 8, 5, 5, 6, 5, 8, 1, 1, 1, 6, 2, 1, 2, 2, 1, 4, 1, 1, 1, 1,
            2, 9, 1, 7, 3, 9, 1, 4, 1, 2, 3, 6, 1, 1, 1, 3, 1, 9, 9, 1, 3, 3, 3, 3, 8, 1, 1, 1, 1,
            1, 6, 5, 6, 9, 1, 3, 2, 4, 1, 5, 2, 3,
        ],
        vec![
            1, 4, 1, 8, 1, 9, 1, 4, 2, 1, 2, 4, 2, 3, 7, 2, 2, 4, 1, 5, 2, 3, 3, 4, 3, 8, 2, 8, 1,
            4, 1, 1, 2, 2, 6, 2, 4, 3, 2, 9, 1, 1, 6, 1, 1, 1, 7, 5, 4, 3, 9, 7, 1, 1, 3, 5, 4, 8,
            9, 8, 2, 2, 9, 3, 1, 9, 1, 4, 1, 1, 1, 1, 1, 1, 4, 4, 2, 6, 1, 2, 2, 9, 9, 4, 4, 1, 2,
            4, 8, 3, 3, 1, 1, 1, 8, 4, 7, 3, 7, 6,
        ],
        vec![
            1, 4, 1, 5, 2, 2, 3, 8, 1, 1, 9, 2, 8, 5, 8, 8, 1, 1, 4, 1, 6, 8, 2, 1, 3, 3, 1, 9, 5,
            9, 1, 1, 4, 8, 9, 2, 8, 5, 1, 7, 4, 2, 7, 1, 6, 9, 3, 8, 1, 1, 8, 4, 9, 9, 1, 6, 9, 1,
            1, 1, 2, 1, 1, 8, 2, 2, 9, 2, 1, 8, 2, 6, 3, 6, 3, 8, 9, 5, 1, 8, 5, 4, 7, 4, 1, 1, 2,
            2, 7, 2, 2, 1, 5, 9, 9, 3, 1, 2, 1, 3,
        ],
        vec![
            1, 1, 8, 5, 1, 1, 2, 2, 1, 1, 2, 1, 6, 2, 9, 6, 8, 4, 6, 1, 4, 1, 2, 3, 1, 6, 2, 1, 5,
            9, 2, 1, 5, 8, 5, 1, 1, 2, 4, 3, 1, 1, 1, 1, 1, 1, 3, 4, 6, 1, 1, 7, 6, 4, 8, 9, 7, 1,
            9, 1, 1, 3, 3, 1, 8, 1, 1, 2, 7, 9, 6, 8, 9, 2, 3, 4, 2, 9, 1, 8, 3, 7, 1, 1, 6, 1, 5,
            1, 2, 6, 4, 7, 6, 1, 2, 9, 9, 5, 2, 1,
        ],
        vec![
            2, 1, 5, 7, 1, 7, 5, 1, 3, 2, 8, 4, 2, 9, 1, 8, 5, 9, 2, 3, 7, 6, 3, 8, 6, 2, 3, 5, 4,
            5, 2, 6, 8, 6, 1, 1, 1, 3, 2, 4, 6, 2, 7, 2, 1, 4, 1, 2, 2, 7, 3, 3, 2, 9, 8, 5, 4, 4,
            1, 1, 3, 1, 1, 1, 5, 3, 4, 7, 1, 2, 2, 1, 2, 5, 9, 1, 3, 9, 3, 2, 6, 2, 3, 1, 3, 8, 3,
            2, 1, 6, 5, 4, 3, 7, 9, 1, 2, 1, 1, 3,
        ],
        vec![
            1, 1, 1, 6, 1, 1, 2, 4, 9, 3, 3, 1, 9, 2, 9, 9, 4, 3, 2, 1, 4, 5, 6, 4, 9, 1, 4, 9, 9,
            9, 2, 6, 9, 7, 7, 1, 1, 7, 2, 5, 4, 2, 1, 1, 5, 4, 4, 2, 4, 2, 2, 4, 3, 1, 2, 2, 1, 3,
            3, 9, 6, 9, 7, 7, 1, 4, 2, 9, 8, 5, 5, 1, 2, 2, 3, 2, 4, 2, 7, 3, 2, 6, 3, 3, 8, 2, 9,
            9, 6, 4, 2, 1, 4, 9, 8, 3, 6, 1, 9, 6,
        ],
        vec![
            6, 5, 4, 9, 2, 2, 9, 4, 9, 9, 2, 1, 2, 3, 9, 5, 1, 1, 3, 2, 8, 3, 2, 9, 1, 4, 9, 6, 1,
            5, 1, 2, 3, 1, 6, 1, 1, 4, 3, 1, 2, 5, 1, 8, 4, 3, 3, 4, 4, 1, 2, 9, 1, 4, 2, 2, 9, 4,
            3, 1, 9, 9, 4, 7, 2, 5, 2, 8, 1, 1, 2, 5, 1, 2, 1, 9, 7, 5, 5, 3, 9, 1, 6, 4, 2, 5, 5,
            3, 1, 7, 3, 1, 1, 3, 8, 2, 1, 2, 9, 6,
        ],
        vec![
            4, 1, 1, 3, 3, 9, 3, 6, 2, 1, 3, 1, 6, 2, 2, 2, 2, 8, 3, 8, 5, 2, 9, 1, 4, 5, 1, 9, 9,
            6, 8, 2, 3, 8, 2, 5, 6, 1, 1, 2, 7, 1, 1, 1, 3, 8, 4, 5, 5, 5, 4, 8, 5, 3, 8, 1, 9, 1,
            5, 9, 2, 3, 2, 4, 2, 3, 6, 2, 7, 7, 7, 4, 3, 1, 4, 1, 1, 9, 8, 9, 7, 9, 9, 5, 9, 4, 7,
            1, 8, 6, 2, 7, 1, 2, 1, 6, 8, 2, 2, 1,
        ],
        vec![
            1, 7, 4, 1, 1, 2, 8, 1, 3, 4, 3, 5, 4, 4, 1, 4, 2, 4, 1, 4, 1, 9, 1, 7, 6, 1, 1, 7, 1,
            1, 9, 2, 1, 2, 6, 4, 1, 5, 4, 1, 1, 1, 7, 8, 8, 1, 9, 5, 5, 1, 2, 6, 1, 6, 1, 9, 4, 6,
            2, 1, 3, 1, 1, 8, 1, 9, 3, 3, 1, 2, 3, 2, 4, 8, 5, 7, 6, 1, 9, 8, 7, 4, 3, 4, 8, 2, 8,
            3, 4, 2, 3, 3, 2, 5, 5, 4, 8, 5, 9, 8,
        ],
        vec![
            3, 7, 5, 1, 1, 4, 1, 1, 2, 3, 7, 1, 2, 1, 6, 3, 9, 2, 5, 1, 1, 3, 2, 8, 2, 1, 7, 2, 7,
            6, 4, 9, 3, 2, 3, 5, 3, 5, 3, 4, 1, 1, 6, 5, 4, 6, 2, 3, 1, 2, 8, 1, 2, 9, 3, 1, 1, 8,
            5, 9, 1, 4, 2, 2, 5, 2, 2, 1, 1, 3, 1, 4, 9, 1, 5, 2, 2, 6, 1, 4, 9, 8, 8, 7, 4, 5, 1,
            5, 9, 8, 9, 3, 1, 3, 5, 5, 4, 3, 1, 4,
        ],
        vec![
            4, 5, 1, 4, 5, 5, 1, 9, 7, 1, 3, 4, 1, 7, 6, 1, 2, 5, 1, 6, 2, 9, 4, 6, 5, 3, 1, 2, 5,
            1, 1, 3, 2, 9, 2, 9, 1, 9, 7, 8, 5, 1, 2, 1, 4, 8, 4, 6, 1, 9, 9, 1, 6, 1, 2, 9, 5, 7,
            4, 1, 1, 3, 2, 7, 6, 2, 1, 2, 2, 4, 1, 9, 2, 1, 1, 1, 1, 2, 6, 2, 9, 6, 3, 7, 9, 2, 1,
            5, 8, 7, 1, 2, 3, 3, 8, 1, 1, 4, 8, 1,
        ],
        vec![
            3, 2, 9, 3, 2, 1, 7, 1, 4, 4, 1, 3, 6, 1, 1, 6, 2, 9, 8, 9, 9, 1, 3, 4, 3, 1, 1, 1, 5,
            2, 4, 6, 1, 6, 8, 6, 3, 8, 9, 3, 2, 3, 4, 4, 6, 2, 1, 1, 1, 7, 2, 3, 5, 3, 1, 2, 1, 9,
            1, 4, 1, 1, 7, 2, 2, 7, 3, 2, 6, 1, 1, 9, 2, 4, 2, 1, 9, 1, 1, 1, 8, 6, 6, 1, 9, 1, 5,
            9, 6, 1, 5, 2, 9, 9, 1, 5, 1, 1, 3, 5,
        ],
        vec![
            7, 7, 7, 4, 2, 2, 1, 1, 5, 1, 2, 8, 5, 2, 1, 9, 9, 9, 6, 1, 1, 7, 1, 7, 4, 3, 7, 3, 4,
            4, 6, 1, 4, 6, 1, 4, 1, 8, 3, 3, 8, 1, 1, 6, 6, 6, 6, 2, 7, 8, 3, 1, 9, 1, 2, 9, 2, 1,
            2, 1, 1, 6, 8, 6, 3, 1, 1, 3, 3, 1, 6, 2, 2, 3, 2, 6, 6, 4, 1, 1, 2, 3, 2, 9, 1, 5, 9,
            6, 3, 5, 3, 8, 5, 6, 6, 1, 2, 9, 5, 9,
        ],
        vec![
            1, 3, 5, 1, 1, 2, 2, 2, 1, 4, 7, 5, 1, 8, 8, 9, 1, 9, 5, 3, 5, 1, 7, 6, 4, 1, 4, 3, 3,
            3, 2, 6, 1, 7, 1, 2, 7, 2, 3, 1, 5, 2, 9, 1, 4, 4, 6, 6, 7, 7, 2, 1, 2, 2, 1, 1, 2, 9,
            8, 1, 1, 1, 4, 2, 1, 5, 1, 6, 8, 6, 1, 1, 2, 4, 4, 7, 1, 6, 1, 4, 7, 2, 2, 3, 2, 9, 1,
            2, 1, 1, 4, 9, 1, 1, 4, 9, 8, 4, 3, 2,
        ],
        vec![
            7, 2, 2, 5, 1, 2, 1, 6, 1, 7, 1, 2, 5, 2, 5, 7, 5, 9, 8, 8, 7, 1, 9, 6, 3, 2, 1, 1, 8,
            1, 5, 8, 4, 4, 7, 3, 7, 2, 2, 1, 5, 7, 8, 1, 2, 4, 2, 4, 8, 7, 2, 7, 1, 3, 2, 4, 9, 8,
            8, 5, 1, 2, 5, 1, 3, 9, 1, 5, 1, 3, 3, 2, 3, 1, 3, 3, 1, 6, 5, 9, 2, 2, 8, 1, 8, 7, 8,
            4, 8, 5, 1, 3, 4, 4, 1, 6, 1, 9, 1, 6,
        ],
        vec![
            1, 1, 1, 2, 1, 8, 7, 3, 4, 5, 1, 4, 1, 2, 9, 7, 1, 7, 9, 1, 9, 8, 1, 4, 1, 5, 1, 2, 8,
            1, 3, 7, 2, 5, 4, 3, 3, 1, 1, 9, 2, 1, 3, 9, 2, 5, 6, 9, 6, 9, 1, 1, 5, 7, 7, 2, 2, 7,
            2, 4, 1, 2, 2, 2, 8, 1, 6, 4, 7, 1, 1, 5, 1, 8, 5, 5, 1, 9, 4, 1, 1, 2, 2, 2, 1, 6, 7,
            2, 6, 1, 2, 4, 6, 8, 1, 2, 2, 1, 1, 9,
        ],
        vec![
            1, 1, 2, 1, 9, 9, 1, 3, 5, 5, 9, 9, 2, 1, 3, 2, 5, 5, 2, 1, 1, 1, 2, 1, 3, 1, 3, 2, 1,
            9, 1, 4, 4, 2, 5, 2, 9, 4, 3, 3, 3, 7, 9, 2, 2, 2, 1, 4, 1, 7, 3, 7, 7, 2, 1, 1, 1, 8,
            5, 1, 5, 8, 1, 4, 4, 1, 1, 1, 7, 1, 1, 2, 8, 3, 7, 1, 1, 5, 8, 3, 9, 1, 1, 8, 5, 2, 1,
            1, 7, 7, 2, 6, 8, 1, 1, 2, 1, 1, 5, 1,
        ],
        vec![
            3, 6, 1, 1, 3, 1, 7, 1, 1, 9, 8, 4, 9, 2, 8, 5, 6, 1, 1, 9, 3, 1, 2, 1, 6, 3, 8, 1, 8,
            1, 4, 8, 4, 1, 1, 1, 7, 1, 1, 1, 5, 5, 3, 1, 1, 8, 1, 2, 3, 1, 5, 1, 1, 2, 3, 4, 2, 9,
            1, 2, 1, 9, 3, 3, 7, 3, 3, 7, 8, 1, 4, 3, 1, 9, 1, 8, 2, 4, 6, 4, 3, 8, 3, 1, 9, 1, 9,
            2, 5, 4, 3, 3, 7, 8, 2, 4, 1, 2, 4, 4,
        ],
        vec![
            2, 2, 1, 6, 9, 7, 3, 1, 5, 4, 3, 3, 5, 1, 9, 7, 1, 3, 5, 2, 1, 1, 5, 3, 5, 8, 2, 1, 4,
            8, 2, 8, 1, 6, 1, 3, 6, 1, 2, 1, 2, 1, 6, 7, 7, 7, 1, 3, 8, 7, 2, 2, 3, 5, 7, 7, 2, 6,
            1, 2, 2, 6, 3, 1, 2, 5, 3, 4, 3, 1, 1, 9, 1, 2, 1, 7, 2, 6, 2, 2, 1, 9, 6, 3, 7, 1, 1,
            2, 9, 2, 7, 4, 2, 7, 5, 6, 4, 1, 5, 1,
        ],
        vec![
            5, 1, 9, 1, 9, 9, 8, 4, 1, 1, 8, 2, 3, 1, 1, 8, 8, 9, 3, 3, 8, 5, 2, 1, 7, 3, 9, 2, 3,
            1, 2, 1, 4, 9, 1, 2, 4, 8, 8, 1, 2, 1, 6, 9, 8, 1, 9, 8, 8, 1, 4, 2, 4, 5, 5, 3, 9, 1,
            1, 2, 1, 9, 1, 1, 7, 4, 1, 5, 9, 9, 9, 2, 5, 2, 9, 1, 7, 1, 2, 1, 3, 1, 9, 3, 9, 1, 1,
            2, 9, 8, 4, 6, 2, 2, 5, 9, 4, 1, 6, 2,
        ],
        vec![
            9, 5, 1, 2, 5, 3, 2, 1, 6, 9, 8, 2, 3, 4, 6, 2, 1, 1, 7, 9, 4, 5, 3, 9, 3, 4, 3, 2, 5,
            4, 1, 7, 4, 5, 8, 1, 3, 5, 2, 5, 8, 1, 1, 4, 4, 1, 2, 7, 2, 9, 8, 4, 1, 2, 1, 1, 1, 2,
            5, 5, 2, 9, 3, 2, 9, 1, 7, 8, 1, 7, 9, 2, 3, 3, 8, 3, 1, 8, 1, 4, 7, 5, 4, 1, 1, 4, 4,
            1, 1, 5, 1, 3, 4, 9, 2, 2, 6, 8, 2, 1,
        ],
        vec![
            3, 4, 1, 1, 8, 7, 4, 8, 2, 1, 9, 1, 1, 5, 6, 9, 2, 7, 1, 3, 2, 4, 1, 2, 3, 2, 1, 1, 3,
            2, 6, 1, 6, 3, 8, 4, 1, 9, 9, 1, 1, 2, 8, 1, 2, 2, 3, 4, 1, 4, 8, 2, 7, 2, 1, 1, 1, 1,
            1, 1, 5, 3, 9, 9, 6, 5, 1, 2, 9, 9, 3, 1, 4, 6, 9, 9, 2, 6, 6, 6, 5, 8, 8, 4, 9, 9, 1,
            1, 7, 1, 1, 2, 3, 1, 3, 2, 3, 9, 1, 2,
        ],
        vec![
            7, 6, 9, 4, 6, 8, 5, 8, 6, 1, 1, 3, 2, 3, 4, 8, 9, 5, 1, 4, 7, 1, 8, 6, 1, 8, 1, 7, 7,
            3, 1, 7, 8, 7, 6, 8, 5, 6, 1, 5, 3, 5, 2, 7, 5, 3, 1, 7, 2, 1, 3, 9, 7, 4, 4, 3, 9, 2,
            7, 2, 1, 5, 1, 2, 2, 5, 5, 3, 6, 1, 2, 5, 1, 4, 9, 2, 2, 2, 1, 9, 1, 1, 1, 2, 7, 1, 2,
            2, 6, 1, 3, 8, 4, 5, 3, 3, 4, 2, 9, 6,
        ],
        vec![
            1, 1, 1, 3, 6, 9, 7, 4, 1, 3, 3, 2, 9, 1, 7, 1, 2, 1, 1, 4, 3, 9, 7, 3, 9, 5, 1, 1, 9,
            3, 1, 4, 1, 1, 9, 2, 4, 9, 6, 8, 8, 8, 8, 8, 3, 9, 3, 1, 2, 2, 7, 8, 3, 1, 9, 7, 5, 9,
            4, 1, 9, 2, 3, 9, 8, 1, 4, 9, 7, 2, 8, 1, 1, 1, 2, 1, 8, 5, 4, 5, 3, 3, 3, 9, 9, 2, 6,
            9, 7, 4, 2, 3, 1, 8, 2, 6, 4, 8, 6, 2,
        ],
        vec![
            3, 2, 6, 1, 6, 6, 7, 1, 4, 1, 1, 9, 1, 7, 2, 1, 2, 3, 3, 3, 9, 2, 3, 1, 1, 9, 4, 1, 1,
            1, 3, 6, 3, 3, 1, 9, 1, 7, 9, 5, 8, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 9, 2, 2, 1, 1, 7, 4,
            1, 4, 2, 6, 3, 5, 6, 9, 1, 7, 5, 5, 5, 5, 1, 2, 4, 5, 1, 9, 2, 3, 1, 9, 9, 4, 9, 1, 7,
            6, 8, 1, 4, 8, 1, 4, 3, 1, 6, 9, 9, 1,
        ],
        vec![
            2, 1, 2, 8, 1, 1, 1, 3, 2, 5, 1, 1, 4, 2, 1, 2, 3, 3, 6, 3, 3, 7, 6, 3, 6, 6, 1, 2, 5,
            2, 9, 2, 1, 7, 1, 1, 2, 2, 9, 3, 4, 2, 6, 9, 7, 6, 2, 5, 3, 8, 1, 4, 9, 8, 9, 8, 9, 3,
            3, 3, 1, 3, 8, 6, 5, 2, 2, 7, 1, 3, 4, 1, 8, 2, 8, 1, 5, 7, 1, 9, 1, 5, 9, 1, 1, 9, 2,
            2, 4, 5, 7, 7, 1, 2, 1, 3, 3, 1, 3, 1,
        ],
        vec![
            8, 3, 8, 8, 9, 1, 1, 3, 7, 6, 6, 1, 8, 3, 4, 4, 9, 9, 4, 9, 9, 2, 5, 8, 3, 1, 8, 4, 7,
            5, 2, 6, 8, 5, 5, 3, 9, 2, 3, 8, 5, 4, 3, 9, 5, 9, 9, 5, 3, 2, 4, 6, 3, 6, 4, 8, 2, 1,
            6, 5, 9, 1, 2, 2, 4, 2, 5, 8, 8, 9, 2, 9, 9, 7, 2, 9, 3, 5, 2, 7, 5, 1, 1, 1, 1, 9, 2,
            1, 7, 2, 1, 5, 1, 1, 2, 7, 2, 1, 9, 9,
        ],
        vec![
            2, 1, 2, 2, 1, 5, 5, 9, 2, 1, 9, 3, 2, 5, 4, 2, 1, 1, 4, 6, 1, 1, 1, 5, 1, 4, 2, 1, 7,
            5, 2, 1, 2, 7, 8, 2, 5, 7, 2, 7, 1, 4, 1, 1, 9, 8, 1, 9, 7, 4, 1, 3, 1, 1, 4, 2, 5, 5,
            4, 1, 9, 1, 4, 2, 7, 1, 7, 2, 6, 5, 3, 3, 3, 3, 9, 2, 6, 8, 4, 8, 2, 1, 4, 7, 7, 2, 2,
            6, 6, 1, 2, 8, 9, 4, 8, 6, 2, 5, 5, 9,
        ],
        vec![
            1, 9, 5, 1, 1, 2, 1, 6, 5, 5, 9, 2, 1, 8, 8, 1, 3, 7, 5, 8, 1, 9, 2, 5, 3, 1, 1, 9, 5,
            5, 4, 4, 1, 3, 5, 2, 5, 1, 8, 1, 7, 5, 7, 2, 1, 1, 2, 7, 1, 9, 1, 1, 7, 9, 9, 9, 1, 5,
            2, 1, 1, 5, 5, 1, 2, 9, 9, 9, 2, 1, 6, 1, 2, 3, 5, 2, 9, 5, 2, 1, 1, 3, 9, 5, 3, 9, 2,
            4, 9, 5, 5, 8, 5, 1, 7, 3, 7, 8, 5, 5,
        ],
        vec![
            8, 1, 9, 5, 2, 1, 4, 2, 8, 5, 6, 1, 1, 1, 8, 8, 3, 9, 6, 6, 1, 1, 3, 3, 5, 7, 9, 3, 7,
            1, 1, 1, 1, 7, 1, 5, 1, 3, 1, 2, 3, 1, 6, 1, 8, 8, 1, 4, 9, 8, 7, 3, 4, 2, 2, 6, 1, 3,
            9, 7, 3, 8, 2, 5, 9, 8, 9, 1, 8, 5, 9, 2, 4, 5, 1, 4, 9, 9, 1, 3, 5, 9, 3, 4, 6, 3, 3,
            9, 7, 8, 3, 8, 4, 3, 8, 4, 3, 3, 3, 4,
        ],
        vec![
            5, 4, 5, 6, 8, 3, 3, 9, 1, 9, 6, 1, 9, 2, 5, 3, 9, 1, 2, 1, 7, 4, 7, 3, 3, 9, 9, 6, 9,
            2, 2, 1, 5, 6, 2, 1, 7, 8, 8, 4, 3, 7, 5, 9, 3, 2, 1, 1, 7, 3, 7, 3, 5, 4, 2, 9, 4, 3,
            2, 6, 8, 9, 9, 5, 8, 1, 6, 1, 1, 3, 2, 3, 2, 1, 2, 1, 7, 8, 9, 7, 3, 1, 3, 9, 2, 8, 9,
            8, 4, 2, 7, 3, 9, 1, 1, 8, 1, 1, 1, 6,
        ],
        vec![
            4, 7, 7, 7, 2, 1, 7, 1, 8, 1, 6, 1, 1, 4, 1, 4, 8, 1, 2, 1, 6, 6, 1, 4, 4, 3, 2, 3, 1,
            4, 6, 9, 8, 1, 1, 3, 8, 6, 7, 7, 5, 7, 8, 4, 1, 5, 8, 1, 1, 2, 5, 3, 8, 4, 2, 2, 9, 4,
            4, 3, 2, 3, 4, 1, 4, 2, 3, 9, 1, 9, 9, 2, 2, 4, 2, 2, 3, 8, 1, 6, 1, 4, 6, 9, 1, 6, 1,
            9, 3, 1, 9, 2, 6, 3, 2, 9, 2, 6, 7, 3,
        ],
        vec![
            1, 8, 7, 1, 9, 8, 5, 1, 2, 6, 9, 5, 2, 1, 3, 2, 2, 7, 3, 3, 1, 2, 5, 3, 1, 6, 1, 1, 8,
            2, 9, 1, 1, 3, 5, 1, 1, 3, 3, 1, 9, 6, 8, 2, 5, 3, 6, 3, 1, 5, 1, 2, 2, 5, 1, 8, 6, 3,
            8, 8, 9, 4, 4, 6, 1, 9, 6, 5, 7, 1, 4, 3, 6, 9, 8, 2, 6, 6, 2, 3, 1, 9, 3, 9, 3, 3, 1,
            2, 1, 1, 7, 8, 1, 4, 3, 1, 2, 2, 2, 3,
        ],
        vec![
            4, 1, 4, 4, 1, 1, 8, 6, 4, 6, 8, 5, 6, 2, 8, 8, 7, 3, 1, 7, 8, 9, 1, 7, 9, 9, 1, 2, 6,
            2, 1, 3, 6, 5, 5, 3, 2, 7, 5, 2, 7, 1, 5, 1, 1, 2, 2, 5, 5, 9, 3, 5, 5, 4, 6, 1, 2, 8,
            4, 5, 9, 2, 2, 1, 1, 7, 1, 3, 1, 1, 1, 3, 7, 7, 6, 2, 9, 7, 3, 8, 7, 9, 1, 2, 9, 4, 6,
            2, 1, 9, 6, 8, 6, 1, 2, 2, 3, 3, 4, 1,
        ],
        vec![
            5, 3, 3, 1, 7, 4, 3, 1, 2, 6, 7, 8, 7, 1, 5, 4, 4, 7, 1, 2, 1, 2, 4, 2, 5, 9, 5, 2, 8,
            4, 5, 4, 7, 6, 2, 4, 5, 9, 9, 1, 1, 1, 2, 2, 3, 4, 2, 2, 2, 9, 9, 8, 1, 5, 4, 2, 7, 2,
            3, 9, 9, 1, 7, 5, 1, 3, 2, 1, 1, 2, 4, 1, 3, 1, 2, 3, 7, 1, 5, 1, 7, 1, 1, 3, 6, 6, 4,
            1, 9, 1, 1, 1, 3, 1, 7, 2, 9, 1, 8, 2,
        ],
        vec![
            6, 4, 5, 9, 3, 2, 1, 1, 2, 2, 2, 8, 2, 3, 1, 5, 1, 3, 1, 8, 2, 2, 5, 2, 3, 3, 1, 2, 1,
            1, 7, 1, 1, 7, 2, 1, 2, 3, 2, 9, 3, 8, 1, 8, 2, 8, 3, 1, 1, 2, 6, 8, 1, 5, 7, 7, 3, 1,
            3, 1, 6, 3, 3, 3, 1, 2, 6, 3, 9, 2, 2, 8, 5, 1, 8, 1, 9, 5, 1, 3, 8, 9, 3, 7, 4, 1, 2,
            1, 8, 6, 1, 5, 7, 3, 6, 1, 1, 8, 8, 3,
        ],
        vec![
            1, 1, 2, 9, 5, 1, 9, 1, 2, 1, 9, 3, 2, 1, 3, 6, 1, 6, 8, 2, 1, 1, 1, 7, 3, 3, 9, 5, 1,
            5, 2, 1, 5, 6, 1, 5, 8, 3, 1, 1, 1, 9, 8, 5, 2, 1, 1, 6, 1, 7, 2, 1, 8, 7, 7, 2, 4, 2,
            1, 2, 5, 6, 2, 9, 6, 1, 2, 1, 7, 1, 3, 2, 3, 5, 9, 1, 2, 2, 9, 3, 3, 2, 8, 8, 1, 6, 5,
            5, 5, 9, 2, 2, 9, 5, 1, 1, 7, 4, 5, 2,
        ],
        vec![
            4, 3, 4, 1, 8, 2, 2, 5, 2, 1, 5, 9, 5, 9, 3, 9, 6, 2, 2, 1, 8, 9, 1, 6, 4, 9, 8, 1, 1,
            1, 6, 3, 3, 1, 2, 1, 9, 2, 6, 1, 2, 7, 4, 1, 3, 2, 1, 1, 8, 7, 8, 1, 4, 1, 1, 7, 9, 6,
            1, 9, 3, 7, 4, 1, 1, 6, 9, 3, 1, 1, 9, 1, 8, 3, 1, 1, 8, 2, 2, 2, 1, 7, 8, 7, 7, 7, 6,
            4, 1, 1, 1, 6, 9, 9, 9, 1, 1, 2, 5, 4,
        ],
        vec![
            4, 1, 9, 4, 5, 3, 6, 1, 2, 9, 1, 7, 1, 7, 1, 5, 7, 2, 2, 2, 8, 6, 3, 2, 7, 5, 1, 1, 1,
            1, 1, 1, 2, 4, 8, 2, 8, 7, 4, 5, 9, 7, 2, 2, 7, 1, 3, 2, 5, 1, 1, 6, 7, 1, 3, 5, 6, 9,
            3, 7, 4, 7, 5, 1, 3, 2, 4, 4, 2, 9, 2, 9, 2, 3, 1, 1, 7, 5, 3, 1, 5, 1, 1, 3, 1, 5, 1,
            6, 4, 1, 3, 2, 4, 1, 8, 3, 4, 4, 4, 9,
        ],
        vec![
            2, 6, 5, 4, 1, 4, 2, 9, 4, 5, 6, 3, 1, 1, 2, 9, 9, 5, 6, 1, 2, 3, 3, 6, 7, 4, 8, 1, 1,
            7, 2, 9, 1, 2, 1, 4, 2, 7, 4, 4, 1, 9, 9, 1, 2, 2, 1, 9, 1, 6, 2, 6, 9, 2, 2, 2, 3, 9,
            3, 9, 5, 1, 1, 2, 5, 9, 2, 2, 1, 7, 1, 4, 8, 8, 8, 3, 5, 1, 4, 1, 6, 8, 9, 3, 2, 6, 2,
            1, 1, 8, 4, 2, 7, 2, 1, 7, 8, 6, 1, 5,
        ],
        vec![
            4, 1, 5, 7, 7, 1, 3, 2, 9, 4, 9, 2, 1, 2, 3, 2, 1, 4, 4, 5, 1, 9, 1, 8, 2, 4, 7, 6, 4,
            4, 1, 1, 8, 9, 5, 2, 6, 3, 1, 1, 3, 1, 1, 1, 1, 4, 7, 7, 7, 3, 4, 2, 9, 6, 5, 9, 3, 6,
            3, 5, 6, 9, 5, 1, 7, 4, 3, 2, 2, 5, 1, 3, 1, 1, 2, 1, 1, 9, 1, 8, 2, 4, 4, 1, 6, 9, 2,
            4, 1, 7, 8, 5, 1, 2, 3, 1, 8, 5, 1, 1,
        ],
        vec![
            6, 9, 1, 2, 4, 1, 1, 8, 2, 1, 5, 3, 1, 2, 9, 2, 2, 9, 2, 1, 8, 1, 2, 6, 7, 6, 1, 3, 6,
            6, 2, 2, 2, 2, 5, 1, 6, 1, 3, 2, 5, 7, 4, 1, 9, 9, 1, 3, 4, 1, 7, 7, 3, 9, 4, 1, 4, 8,
            7, 9, 8, 1, 1, 1, 5, 1, 4, 1, 3, 6, 3, 1, 9, 1, 2, 1, 5, 6, 6, 7, 3, 1, 3, 1, 4, 2, 3,
            5, 3, 1, 7, 1, 6, 4, 4, 3, 9, 9, 1, 1,
        ],
        vec![
            1, 4, 3, 7, 3, 2, 1, 1, 5, 5, 3, 2, 9, 2, 1, 7, 2, 2, 9, 1, 4, 2, 6, 7, 8, 1, 3, 7, 5,
            7, 1, 1, 1, 1, 3, 5, 9, 2, 6, 3, 4, 1, 4, 1, 2, 3, 2, 1, 1, 2, 2, 4, 3, 1, 2, 8, 8, 2,
            3, 3, 5, 8, 2, 5, 1, 1, 9, 9, 2, 7, 7, 9, 8, 1, 3, 9, 8, 3, 2, 9, 2, 9, 1, 2, 4, 1, 1,
            9, 6, 4, 8, 1, 2, 9, 2, 7, 3, 1, 5, 8,
        ],
        vec![
            1, 7, 3, 2, 3, 9, 1, 8, 1, 8, 1, 3, 8, 2, 2, 9, 5, 8, 9, 4, 9, 1, 9, 1, 4, 6, 1, 9, 3,
            5, 8, 2, 6, 6, 9, 6, 1, 1, 6, 3, 3, 9, 8, 2, 1, 3, 9, 1, 9, 3, 9, 5, 2, 1, 3, 2, 9, 1,
            5, 1, 4, 9, 9, 9, 4, 1, 5, 1, 2, 2, 4, 3, 5, 1, 3, 2, 1, 1, 3, 7, 3, 4, 8, 1, 3, 2, 8,
            8, 3, 8, 1, 4, 1, 9, 8, 1, 9, 2, 4, 9,
        ],
        vec![
            4, 1, 1, 3, 3, 4, 6, 9, 2, 1, 4, 2, 1, 9, 1, 7, 8, 6, 6, 1, 1, 1, 8, 5, 7, 6, 5, 4, 3,
            9, 3, 4, 1, 2, 9, 5, 2, 1, 2, 2, 4, 1, 1, 6, 8, 9, 9, 3, 2, 6, 1, 1, 5, 5, 4, 1, 2, 1,
            5, 7, 1, 4, 8, 9, 9, 2, 1, 1, 9, 8, 6, 8, 4, 1, 9, 3, 3, 3, 1, 1, 4, 1, 3, 1, 9, 4, 6,
            9, 5, 5, 9, 3, 6, 2, 8, 9, 7, 4, 1, 8,
        ],
        vec![
            3, 9, 3, 6, 1, 8, 1, 5, 1, 4, 2, 4, 1, 7, 1, 9, 5, 1, 1, 9, 3, 1, 2, 9, 4, 3, 4, 2, 1,
            7, 4, 1, 2, 1, 3, 1, 1, 3, 2, 1, 2, 3, 4, 1, 3, 2, 8, 2, 1, 6, 8, 3, 4, 4, 1, 1, 4, 3,
            2, 2, 1, 6, 2, 7, 1, 2, 1, 2, 2, 2, 9, 1, 2, 2, 1, 9, 1, 2, 1, 1, 2, 3, 4, 1, 7, 2, 8,
            9, 7, 5, 4, 9, 9, 1, 2, 1, 2, 1, 9, 3,
        ],
        vec![
            5, 2, 3, 1, 2, 1, 1, 9, 7, 9, 3, 1, 1, 9, 6, 1, 1, 1, 6, 1, 1, 6, 2, 1, 2, 2, 5, 1, 6,
            1, 3, 6, 8, 2, 8, 2, 8, 1, 8, 1, 2, 9, 1, 6, 2, 7, 7, 3, 1, 9, 4, 9, 8, 8, 3, 3, 1, 5,
            3, 6, 7, 2, 2, 1, 2, 2, 7, 4, 1, 1, 1, 2, 2, 6, 2, 5, 3, 3, 8, 1, 1, 6, 8, 9, 7, 4, 3,
            6, 5, 9, 5, 1, 9, 9, 2, 5, 3, 1, 6, 2,
        ],
        vec![
            2, 3, 1, 6, 3, 1, 6, 8, 2, 3, 1, 3, 3, 5, 2, 7, 1, 8, 6, 8, 5, 1, 9, 4, 1, 1, 8, 8, 9,
            1, 3, 3, 1, 2, 2, 1, 3, 1, 4, 3, 3, 4, 1, 4, 1, 9, 1, 1, 4, 4, 1, 7, 6, 2, 1, 7, 2, 3,
            6, 7, 6, 1, 1, 9, 6, 4, 3, 8, 6, 6, 4, 1, 3, 1, 1, 1, 5, 1, 2, 1, 3, 7, 2, 4, 8, 4, 9,
            2, 7, 9, 9, 2, 7, 2, 2, 8, 3, 8, 7, 4,
        ],
        vec![
            3, 1, 1, 9, 1, 9, 2, 1, 1, 6, 8, 4, 2, 7, 1, 9, 2, 7, 2, 5, 2, 3, 1, 3, 6, 6, 2, 3, 9,
            1, 1, 3, 1, 3, 9, 3, 7, 5, 3, 4, 1, 3, 7, 5, 2, 4, 2, 1, 4, 4, 8, 1, 1, 9, 1, 7, 3, 5,
            1, 8, 1, 4, 7, 7, 3, 1, 9, 3, 2, 5, 6, 3, 3, 1, 4, 6, 1, 1, 4, 9, 3, 9, 1, 7, 6, 4, 1,
            2, 1, 1, 2, 6, 3, 6, 3, 2, 3, 4, 1, 7,
        ],
        vec![
            2, 4, 9, 2, 7, 1, 4, 1, 9, 2, 5, 2, 1, 6, 1, 2, 1, 4, 1, 2, 4, 8, 1, 6, 9, 3, 1, 9, 1,
            9, 3, 6, 2, 6, 1, 5, 1, 9, 1, 1, 9, 1, 9, 3, 2, 1, 2, 3, 4, 1, 3, 1, 2, 9, 6, 1, 8, 1,
            6, 4, 2, 6, 1, 9, 5, 1, 1, 2, 1, 2, 1, 9, 1, 4, 6, 6, 1, 1, 4, 4, 3, 2, 1, 1, 6, 1, 9,
            5, 1, 3, 2, 6, 5, 9, 2, 9, 9, 9, 9, 5,
        ],
        vec![
            8, 4, 7, 9, 2, 8, 1, 1, 3, 6, 8, 1, 1, 5, 1, 4, 1, 6, 2, 3, 3, 1, 2, 3, 6, 4, 2, 8, 3,
            5, 7, 5, 9, 8, 1, 1, 3, 4, 9, 2, 3, 4, 2, 2, 5, 3, 5, 6, 5, 4, 1, 7, 1, 5, 2, 8, 7, 2,
            8, 4, 2, 1, 1, 2, 7, 2, 5, 1, 4, 9, 9, 3, 4, 8, 6, 6, 5, 3, 8, 7, 4, 4, 3, 3, 1, 1, 4,
            1, 4, 4, 7, 1, 1, 7, 1, 6, 6, 1, 1, 1,
        ],
        vec![
            8, 1, 1, 9, 6, 2, 3, 4, 2, 2, 4, 3, 9, 2, 1, 6, 2, 2, 5, 2, 2, 8, 1, 9, 6, 5, 5, 1, 9,
            5, 4, 2, 7, 2, 6, 4, 3, 4, 4, 3, 1, 7, 1, 9, 1, 9, 5, 8, 9, 1, 9, 8, 6, 1, 7, 8, 2, 1,
            8, 3, 5, 1, 2, 3, 2, 1, 2, 3, 8, 6, 8, 6, 9, 1, 8, 8, 4, 1, 5, 9, 1, 1, 4, 2, 4, 1, 8,
            3, 9, 4, 5, 1, 5, 1, 3, 3, 4, 2, 4, 1,
        ],
        vec![
            2, 4, 4, 1, 1, 3, 1, 6, 1, 3, 4, 1, 1, 1, 1, 6, 6, 5, 3, 2, 9, 7, 8, 2, 2, 1, 1, 6, 7,
            3, 6, 6, 6, 2, 1, 1, 4, 7, 9, 7, 2, 3, 1, 2, 2, 8, 6, 9, 9, 3, 1, 5, 2, 6, 2, 5, 2, 7,
            4, 1, 1, 2, 3, 4, 9, 1, 9, 2, 7, 9, 9, 7, 6, 9, 2, 1, 7, 6, 5, 2, 3, 1, 1, 6, 9, 1, 1,
            2, 2, 1, 6, 1, 1, 2, 9, 1, 9, 8, 4, 8,
        ],
        vec![
            3, 8, 3, 1, 5, 4, 1, 1, 9, 8, 9, 9, 2, 9, 2, 5, 5, 5, 8, 5, 3, 4, 1, 3, 6, 8, 5, 6, 4,
            4, 3, 1, 4, 1, 2, 7, 6, 9, 9, 2, 2, 3, 8, 1, 8, 2, 2, 5, 1, 9, 6, 9, 8, 1, 7, 9, 9, 5,
            1, 3, 1, 1, 3, 2, 4, 2, 3, 2, 7, 7, 6, 1, 2, 2, 1, 1, 1, 1, 2, 1, 9, 7, 3, 1, 2, 7, 1,
            1, 9, 9, 1, 8, 3, 2, 3, 2, 8, 9, 3, 1,
        ],
        vec![
            4, 8, 5, 7, 2, 2, 3, 1, 2, 3, 9, 3, 4, 3, 1, 1, 2, 9, 4, 1, 3, 1, 9, 2, 2, 7, 5, 2, 9,
            9, 3, 1, 1, 4, 9, 7, 6, 9, 1, 5, 5, 5, 7, 9, 7, 6, 8, 1, 8, 1, 8, 1, 2, 7, 5, 7, 2, 8,
            8, 3, 2, 3, 2, 2, 2, 7, 2, 4, 9, 9, 2, 5, 2, 3, 2, 3, 1, 2, 1, 3, 1, 3, 2, 8, 8, 1, 7,
            1, 7, 4, 4, 3, 2, 4, 7, 6, 5, 4, 4, 3,
        ],
        vec![
            6, 2, 8, 8, 3, 9, 1, 1, 3, 4, 1, 2, 4, 4, 1, 6, 4, 7, 3, 9, 2, 4, 3, 4, 3, 7, 1, 6, 7,
            4, 5, 6, 4, 9, 3, 8, 1, 4, 5, 3, 2, 1, 8, 2, 1, 2, 1, 4, 3, 2, 8, 1, 1, 2, 7, 9, 7, 1,
            3, 1, 7, 8, 1, 1, 5, 1, 1, 7, 4, 8, 8, 1, 3, 1, 9, 9, 8, 4, 2, 1, 7, 5, 1, 1, 4, 2, 8,
            8, 2, 2, 5, 4, 5, 2, 1, 1, 4, 9, 2, 4,
        ],
        vec![
            2, 1, 9, 8, 1, 9, 3, 1, 1, 7, 4, 2, 1, 1, 6, 6, 7, 9, 6, 1, 2, 3, 1, 9, 4, 1, 9, 2, 5,
            3, 9, 3, 1, 2, 1, 4, 1, 2, 1, 5, 5, 1, 9, 1, 1, 2, 9, 7, 2, 4, 5, 3, 2, 3, 8, 8, 9, 1,
            8, 1, 3, 1, 1, 1, 3, 6, 5, 4, 4, 1, 1, 1, 2, 1, 1, 4, 1, 1, 5, 3, 4, 7, 2, 1, 4, 1, 1,
            3, 9, 1, 6, 5, 7, 7, 6, 1, 9, 5, 1, 9,
        ],
        vec![
            4, 8, 2, 9, 2, 1, 8, 1, 3, 4, 7, 6, 3, 3, 5, 1, 1, 3, 9, 2, 9, 7, 3, 2, 1, 3, 2, 2, 1,
            6, 8, 9, 2, 4, 1, 1, 6, 1, 2, 1, 4, 8, 4, 5, 3, 3, 2, 1, 1, 2, 9, 1, 2, 5, 5, 7, 1, 9,
            3, 9, 9, 3, 1, 9, 2, 3, 8, 3, 5, 2, 1, 5, 3, 1, 6, 7, 8, 8, 8, 2, 6, 1, 3, 1, 1, 8, 8,
            1, 1, 5, 6, 3, 8, 5, 9, 3, 1, 4, 2, 2,
        ],
        vec![
            1, 1, 2, 8, 1, 3, 1, 5, 1, 8, 7, 9, 5, 6, 1, 2, 5, 1, 1, 8, 1, 1, 6, 9, 8, 6, 7, 1, 4,
            1, 1, 9, 5, 1, 5, 1, 3, 2, 3, 3, 9, 1, 4, 4, 5, 9, 3, 2, 1, 4, 6, 1, 8, 5, 2, 9, 5, 2,
            9, 7, 8, 1, 7, 3, 8, 1, 8, 7, 8, 9, 6, 2, 1, 7, 4, 3, 5, 9, 1, 1, 6, 6, 3, 9, 2, 5, 2,
            1, 4, 6, 4, 1, 8, 1, 8, 1, 6, 1, 7, 8,
        ],
        vec![
            1, 2, 3, 8, 4, 9, 7, 5, 1, 1, 7, 7, 3, 6, 9, 5, 5, 1, 3, 1, 1, 8, 4, 3, 2, 2, 2, 3, 1,
            9, 3, 6, 5, 1, 9, 1, 1, 8, 2, 4, 3, 3, 3, 3, 8, 1, 9, 4, 2, 2, 1, 1, 1, 1, 1, 9, 1, 7,
            8, 9, 2, 6, 3, 1, 6, 5, 5, 1, 9, 1, 3, 2, 8, 3, 6, 8, 5, 5, 8, 7, 1, 2, 8, 4, 2, 6, 1,
            8, 3, 7, 4, 1, 6, 4, 1, 9, 2, 1, 4, 1,
        ],
        vec![
            5, 1, 9, 7, 8, 1, 4, 2, 5, 2, 6, 4, 3, 1, 9, 4, 5, 3, 2, 1, 8, 2, 1, 6, 8, 1, 1, 6, 5,
            3, 5, 5, 1, 2, 1, 4, 2, 1, 1, 8, 9, 1, 1, 4, 1, 2, 9, 7, 4, 1, 2, 2, 5, 1, 2, 4, 2, 5,
            2, 3, 7, 5, 3, 9, 8, 3, 4, 3, 1, 3, 4, 1, 1, 2, 2, 1, 1, 6, 5, 7, 1, 2, 4, 8, 9, 9, 6,
            1, 9, 2, 3, 5, 8, 1, 1, 3, 1, 9, 2, 1,
        ],
        vec![
            5, 9, 1, 1, 8, 1, 2, 9, 3, 9, 5, 7, 9, 5, 1, 8, 4, 6, 5, 4, 6, 1, 4, 5, 1, 1, 7, 3, 1,
            9, 8, 6, 4, 6, 1, 7, 1, 3, 3, 5, 1, 1, 1, 1, 8, 5, 5, 1, 1, 6, 8, 7, 1, 7, 3, 8, 9, 1,
            2, 2, 9, 8, 1, 1, 7, 3, 4, 5, 8, 9, 4, 8, 8, 1, 1, 1, 9, 5, 2, 5, 3, 5, 4, 2, 1, 3, 4,
            1, 8, 7, 1, 9, 2, 9, 7, 1, 2, 5, 8, 8,
        ],
        vec![
            1, 6, 7, 1, 6, 5, 1, 5, 2, 6, 1, 8, 1, 7, 6, 4, 7, 7, 2, 5, 9, 9, 9, 2, 3, 1, 4, 4, 2,
            1, 2, 3, 1, 2, 3, 1, 9, 7, 3, 3, 1, 4, 2, 2, 3, 1, 3, 6, 5, 1, 5, 8, 7, 3, 7, 3, 7, 1,
            6, 3, 5, 3, 7, 1, 4, 2, 3, 5, 2, 2, 1, 4, 2, 8, 2, 9, 1, 8, 1, 1, 9, 2, 1, 1, 2, 2, 6,
            4, 5, 2, 5, 2, 2, 7, 1, 7, 9, 4, 9, 3,
        ],
        vec![
            7, 4, 2, 1, 1, 1, 2, 8, 2, 6, 8, 2, 9, 2, 9, 3, 1, 9, 2, 1, 1, 9, 8, 3, 1, 2, 6, 9, 3,
            1, 4, 9, 4, 1, 2, 1, 2, 9, 2, 3, 2, 3, 2, 1, 2, 3, 5, 3, 8, 8, 5, 1, 8, 6, 9, 1, 5, 1,
            2, 9, 2, 1, 1, 7, 1, 4, 4, 7, 4, 3, 9, 1, 7, 6, 9, 1, 1, 5, 4, 5, 8, 2, 4, 1, 7, 4, 3,
            3, 9, 9, 4, 4, 9, 1, 5, 2, 1, 9, 4, 3,
        ],
        vec![
            9, 1, 9, 1, 3, 4, 6, 7, 1, 6, 9, 7, 2, 5, 6, 1, 9, 4, 5, 2, 4, 5, 2, 4, 4, 3, 2, 4, 4,
            2, 8, 3, 7, 1, 2, 7, 9, 3, 7, 3, 2, 8, 2, 1, 2, 6, 1, 1, 6, 1, 1, 1, 4, 5, 1, 6, 1, 8,
            1, 2, 9, 1, 3, 3, 1, 1, 2, 2, 9, 3, 2, 6, 2, 4, 1, 4, 1, 1, 3, 6, 8, 9, 3, 6, 9, 6, 1,
            4, 1, 1, 1, 7, 1, 1, 4, 4, 5, 4, 2, 1,
        ],
        vec![
            2, 3, 1, 6, 1, 6, 6, 3, 1, 2, 1, 9, 9, 9, 9, 9, 1, 2, 9, 4, 5, 5, 3, 9, 1, 5, 2, 8, 2,
            7, 1, 9, 3, 9, 4, 9, 3, 4, 2, 1, 9, 6, 1, 9, 8, 2, 1, 6, 4, 8, 1, 1, 4, 9, 1, 1, 1, 4,
            3, 1, 8, 7, 9, 5, 7, 2, 1, 4, 3, 5, 6, 1, 5, 2, 9, 1, 3, 6, 2, 2, 1, 3, 3, 1, 1, 3, 1,
            8, 3, 2, 1, 1, 8, 6, 1, 2, 1, 1, 5, 1,
        ],
        vec![
            9, 9, 3, 1, 2, 4, 1, 1, 2, 2, 8, 9, 1, 9, 2, 4, 2, 9, 2, 3, 1, 1, 4, 3, 2, 3, 4, 6, 6,
            4, 6, 1, 1, 3, 8, 4, 6, 7, 6, 1, 5, 1, 2, 1, 3, 1, 9, 8, 1, 4, 3, 7, 3, 1, 1, 5, 1, 1,
            5, 6, 2, 1, 9, 9, 3, 5, 8, 1, 4, 7, 2, 4, 6, 7, 1, 9, 1, 9, 6, 7, 2, 3, 8, 1, 8, 1, 9,
            1, 3, 3, 7, 7, 5, 3, 2, 9, 1, 3, 3, 2,
        ],
        vec![
            1, 2, 2, 2, 1, 1, 4, 3, 6, 1, 9, 5, 2, 9, 1, 4, 5, 5, 5, 2, 2, 1, 2, 2, 2, 2, 9, 6, 1,
            6, 9, 6, 2, 2, 7, 8, 4, 5, 5, 8, 8, 3, 6, 7, 5, 1, 1, 2, 1, 5, 1, 8, 9, 6, 6, 2, 1, 9,
            2, 4, 4, 2, 1, 5, 8, 3, 1, 7, 4, 6, 2, 2, 9, 6, 8, 5, 4, 1, 4, 1, 7, 2, 1, 4, 1, 7, 3,
            7, 9, 6, 3, 1, 3, 3, 1, 1, 4, 4, 9, 3,
        ],
        vec![
            5, 2, 1, 8, 3, 1, 3, 1, 1, 5, 2, 2, 7, 3, 1, 4, 1, 3, 9, 6, 5, 5, 2, 4, 6, 1, 8, 3, 7,
            6, 9, 2, 1, 9, 1, 2, 9, 2, 4, 3, 2, 2, 9, 1, 1, 1, 7, 4, 2, 8, 5, 1, 1, 5, 1, 1, 8, 5,
            6, 1, 7, 5, 2, 2, 4, 1, 3, 9, 7, 3, 8, 2, 2, 1, 2, 8, 3, 4, 2, 2, 2, 7, 8, 1, 2, 9, 1,
            9, 1, 6, 5, 5, 8, 1, 1, 6, 3, 5, 2, 4,
        ],
        vec![
            9, 2, 9, 1, 1, 3, 2, 4, 2, 3, 1, 1, 3, 2, 8, 9, 2, 7, 8, 3, 5, 4, 3, 2, 4, 5, 7, 5, 1,
            5, 3, 1, 6, 9, 2, 2, 9, 9, 9, 2, 1, 7, 1, 1, 2, 7, 1, 2, 4, 1, 3, 5, 4, 6, 1, 8, 3, 7,
            1, 2, 1, 2, 3, 4, 5, 2, 6, 2, 5, 3, 1, 5, 9, 3, 3, 1, 6, 3, 1, 6, 9, 3, 4, 6, 9, 2, 1,
            1, 2, 2, 2, 9, 2, 2, 1, 4, 1, 9, 7, 4,
        ],
        vec![
            8, 4, 5, 2, 3, 6, 3, 3, 2, 5, 8, 9, 7, 6, 4, 1, 9, 2, 5, 1, 6, 9, 9, 3, 2, 4, 3, 1, 4,
            2, 8, 1, 3, 9, 1, 9, 9, 6, 1, 3, 2, 1, 8, 1, 1, 1, 9, 1, 5, 1, 3, 6, 8, 1, 2, 1, 1, 2,
            1, 1, 9, 1, 1, 1, 9, 9, 5, 7, 9, 5, 2, 2, 2, 5, 1, 1, 1, 1, 3, 1, 3, 1, 3, 7, 2, 7, 2,
            3, 1, 2, 1, 2, 1, 2, 7, 1, 1, 1, 1, 8,
        ],
        vec![
            2, 1, 9, 7, 2, 2, 7, 2, 1, 3, 2, 7, 4, 8, 1, 9, 4, 8, 1, 1, 2, 4, 1, 9, 1, 1, 4, 1, 2,
            2, 9, 7, 1, 1, 8, 6, 5, 1, 9, 2, 1, 1, 2, 9, 4, 7, 4, 6, 9, 1, 1, 4, 1, 4, 7, 2, 1, 1,
            5, 2, 3, 2, 3, 9, 6, 4, 5, 2, 1, 8, 2, 1, 3, 1, 5, 1, 1, 9, 3, 1, 3, 2, 9, 4, 2, 9, 2,
            1, 1, 2, 2, 1, 1, 1, 7, 9, 2, 3, 7, 1,
        ],
        vec![
            9, 2, 7, 5, 3, 5, 1, 1, 2, 3, 1, 4, 4, 9, 5, 2, 3, 3, 1, 9, 2, 2, 2, 1, 1, 6, 1, 4, 3,
            1, 4, 2, 1, 2, 3, 6, 5, 5, 3, 8, 5, 1, 3, 5, 3, 1, 1, 3, 2, 5, 5, 8, 1, 2, 3, 1, 2, 6,
            9, 4, 4, 5, 1, 7, 8, 8, 1, 1, 8, 3, 1, 6, 6, 1, 3, 3, 2, 7, 5, 2, 1, 9, 9, 4, 3, 3, 8,
            9, 5, 2, 1, 1, 1, 1, 1, 7, 3, 1, 9, 3,
        ],
        vec![
            1, 6, 7, 6, 1, 2, 3, 3, 1, 1, 9, 1, 3, 1, 2, 9, 6, 6, 2, 6, 6, 5, 8, 3, 1, 1, 9, 1, 9,
            5, 1, 7, 5, 9, 4, 3, 6, 5, 4, 1, 9, 1, 2, 5, 6, 4, 7, 4, 8, 6, 5, 2, 5, 2, 8, 4, 6, 9,
            4, 1, 9, 6, 4, 9, 5, 7, 1, 1, 6, 1, 7, 1, 2, 6, 7, 9, 1, 4, 7, 4, 6, 9, 9, 1, 2, 5, 5,
            3, 2, 2, 5, 7, 4, 1, 9, 1, 3, 9, 9, 6,
        ],
        vec![
            3, 1, 9, 1, 3, 5, 3, 1, 2, 8, 9, 5, 3, 1, 3, 1, 4, 2, 3, 7, 1, 1, 1, 3, 1, 7, 1, 6, 7,
            1, 1, 2, 8, 2, 8, 6, 4, 4, 7, 4, 8, 3, 4, 9, 5, 1, 4, 4, 1, 1, 1, 1, 8, 2, 9, 1, 1, 2,
            8, 3, 6, 5, 1, 9, 3, 4, 9, 7, 2, 4, 2, 2, 3, 2, 9, 7, 6, 1, 1, 7, 1, 2, 5, 3, 4, 7, 2,
            5, 6, 1, 9, 1, 9, 1, 8, 1, 4, 2, 2, 1,
        ],
        vec![
            4, 1, 7, 3, 7, 6, 1, 1, 1, 1, 1, 8, 7, 3, 1, 1, 9, 1, 6, 3, 9, 2, 9, 5, 9, 6, 4, 9, 1,
            5, 5, 9, 5, 3, 2, 8, 1, 4, 5, 4, 6, 7, 5, 1, 7, 8, 2, 5, 9, 4, 2, 5, 3, 3, 6, 9, 9, 1,
            9, 9, 7, 9, 5, 7, 2, 1, 1, 9, 4, 1, 3, 7, 5, 1, 2, 2, 9, 5, 1, 3, 8, 4, 1, 5, 7, 1, 3,
            7, 9, 1, 7, 8, 2, 3, 3, 4, 6, 8, 4, 9,
        ],
        vec![
            6, 2, 3, 1, 8, 6, 6, 8, 2, 1, 1, 8, 7, 6, 3, 2, 9, 4, 3, 1, 2, 1, 8, 9, 2, 4, 3, 3, 5,
            3, 1, 1, 4, 2, 4, 9, 9, 3, 8, 3, 5, 1, 9, 8, 2, 1, 1, 1, 4, 7, 5, 6, 4, 1, 1, 2, 1, 4,
            3, 3, 1, 5, 3, 4, 4, 5, 1, 2, 2, 1, 6, 5, 1, 4, 1, 2, 6, 4, 4, 5, 2, 2, 1, 2, 4, 7, 9,
            1, 2, 1, 7, 8, 4, 8, 2, 2, 9, 1, 1, 2,
        ],
        vec![
            4, 2, 1, 8, 5, 1, 3, 6, 1, 2, 7, 1, 7, 2, 2, 4, 3, 2, 9, 6, 2, 9, 3, 6, 1, 5, 9, 2, 4,
            8, 3, 5, 1, 3, 7, 3, 4, 8, 1, 9, 1, 3, 1, 4, 1, 3, 1, 1, 2, 2, 3, 1, 5, 1, 2, 4, 2, 6,
            8, 3, 1, 4, 3, 1, 5, 9, 4, 3, 3, 6, 2, 2, 3, 6, 1, 8, 4, 1, 3, 4, 7, 2, 2, 4, 2, 1, 2,
            2, 3, 1, 5, 8, 1, 8, 2, 1, 3, 8, 2, 1,
        ],
        vec![
            1, 6, 7, 2, 5, 1, 3, 5, 2, 1, 1, 1, 2, 6, 7, 2, 5, 7, 5, 7, 2, 1, 2, 8, 1, 9, 3, 4, 5,
            4, 5, 3, 2, 2, 1, 3, 1, 8, 6, 1, 6, 9, 1, 4, 5, 1, 1, 8, 8, 2, 1, 2, 5, 1, 2, 2, 4, 6,
            4, 1, 1, 6, 2, 4, 9, 4, 6, 3, 1, 3, 8, 4, 8, 5, 1, 1, 2, 7, 8, 3, 5, 6, 3, 2, 4, 3, 1,
            9, 1, 4, 5, 9, 3, 4, 7, 4, 6, 1, 9, 9,
        ],
        vec![
            7, 2, 7, 7, 4, 3, 5, 2, 1, 5, 4, 1, 3, 4, 8, 5, 6, 8, 1, 3, 1, 1, 1, 7, 7, 1, 2, 1, 4,
            2, 9, 9, 9, 7, 2, 3, 1, 9, 2, 7, 1, 2, 5, 1, 1, 2, 1, 6, 2, 7, 8, 3, 1, 2, 4, 3, 8, 1,
            3, 1, 1, 6, 4, 6, 2, 2, 3, 5, 8, 1, 3, 6, 5, 9, 1, 7, 7, 9, 4, 8, 1, 3, 2, 6, 9, 4, 1,
            1, 1, 3, 2, 8, 1, 1, 9, 4, 8, 1, 1, 8,
        ],
        vec![
            1, 1, 7, 1, 2, 5, 6, 9, 9, 3, 1, 9, 5, 5, 8, 1, 1, 2, 3, 3, 2, 2, 2, 4, 4, 3, 9, 2, 1,
            1, 2, 5, 3, 1, 1, 1, 2, 9, 2, 1, 8, 2, 6, 1, 1, 7, 4, 5, 6, 6, 3, 3, 9, 5, 1, 2, 2, 8,
            8, 9, 1, 1, 1, 8, 2, 1, 3, 9, 7, 7, 1, 3, 5, 1, 1, 3, 9, 1, 2, 1, 2, 8, 7, 3, 6, 7, 7,
            2, 9, 2, 7, 3, 9, 6, 5, 1, 1, 1, 5, 5,
        ],
        vec![
            7, 5, 1, 3, 4, 2, 3, 6, 1, 4, 8, 2, 7, 2, 5, 2, 9, 1, 1, 4, 3, 1, 2, 2, 4, 4, 2, 8, 1,
            2, 9, 4, 1, 9, 4, 7, 1, 9, 1, 3, 8, 5, 7, 3, 1, 6, 3, 4, 7, 9, 2, 1, 8, 1, 1, 2, 8, 9,
            6, 1, 5, 2, 2, 6, 2, 2, 1, 5, 1, 2, 9, 8, 1, 2, 3, 1, 3, 2, 8, 4, 9, 2, 5, 6, 5, 2, 1,
            2, 8, 7, 2, 1, 4, 9, 8, 2, 4, 4, 2, 2,
        ],
        vec![
            4, 1, 7, 2, 3, 9, 2, 6, 6, 7, 1, 7, 2, 9, 2, 3, 4, 1, 4, 1, 1, 2, 2, 8, 1, 2, 7, 1, 4,
            6, 8, 4, 5, 5, 9, 1, 3, 3, 2, 1, 5, 4, 2, 2, 3, 4, 5, 3, 9, 1, 1, 1, 1, 4, 3, 3, 1, 1,
            4, 8, 8, 8, 4, 4, 9, 9, 3, 9, 8, 6, 9, 2, 6, 5, 2, 6, 2, 3, 2, 1, 1, 1, 9, 1, 2, 8, 9,
            9, 4, 6, 7, 9, 1, 9, 6, 7, 3, 1, 2, 9,
        ],
        vec![
            2, 2, 6, 6, 4, 2, 3, 2, 7, 5, 2, 7, 1, 8, 3, 2, 1, 9, 2, 1, 9, 1, 9, 2, 7, 1, 3, 3, 1,
            6, 1, 8, 5, 1, 1, 1, 1, 7, 1, 8, 2, 4, 4, 7, 1, 1, 6, 1, 7, 6, 1, 2, 5, 9, 2, 8, 2, 1,
            1, 6, 9, 6, 3, 4, 2, 1, 5, 4, 9, 2, 7, 2, 1, 2, 1, 2, 5, 2, 9, 5, 1, 9, 3, 3, 2, 1, 7,
            1, 9, 2, 5, 3, 7, 5, 2, 1, 4, 5, 1, 9,
        ],
        vec![
            2, 9, 6, 1, 2, 5, 1, 3, 8, 3, 6, 7, 6, 3, 9, 3, 3, 3, 1, 9, 1, 2, 7, 8, 4, 8, 3, 3, 1,
            9, 8, 3, 1, 6, 8, 5, 6, 1, 1, 4, 6, 1, 1, 4, 3, 7, 9, 5, 8, 5, 1, 1, 1, 3, 4, 7, 2, 9,
            5, 3, 9, 8, 1, 1, 3, 1, 3, 3, 3, 2, 4, 2, 8, 1, 1, 1, 4, 1, 6, 1, 3, 5, 4, 1, 9, 1, 6,
            1, 1, 3, 6, 8, 2, 7, 3, 8, 1, 5, 1, 1,
        ],
        vec![
            2, 1, 9, 1, 3, 1, 3, 4, 3, 2, 4, 1, 4, 5, 2, 3, 5, 9, 4, 7, 1, 9, 4, 9, 3, 1, 2, 6, 5,
            9, 9, 6, 8, 4, 3, 1, 3, 5, 1, 3, 1, 1, 9, 2, 4, 3, 2, 8, 1, 2, 1, 2, 3, 1, 1, 9, 6, 8,
            9, 3, 2, 3, 5, 5, 5, 1, 3, 7, 9, 7, 1, 7, 5, 1, 1, 1, 9, 1, 1, 8, 8, 8, 9, 5, 4, 4, 9,
            8, 9, 9, 9, 4, 4, 7, 1, 2, 9, 4, 2, 2,
        ],
        vec![
            4, 1, 1, 6, 2, 2, 2, 4, 3, 9, 7, 9, 1, 4, 9, 5, 3, 3, 1, 2, 2, 5, 4, 1, 5, 8, 5, 3, 1,
            3, 8, 6, 3, 9, 1, 4, 2, 8, 2, 1, 6, 9, 6, 1, 8, 3, 2, 7, 9, 7, 8, 8, 4, 7, 3, 2, 2, 6,
            9, 1, 2, 1, 3, 2, 1, 6, 1, 2, 9, 6, 1, 1, 6, 6, 3, 4, 4, 4, 1, 3, 5, 2, 2, 4, 2, 2, 8,
            7, 5, 1, 4, 8, 3, 1, 6, 4, 1, 6, 3, 9,
        ],
        vec![
            2, 4, 5, 6, 1, 2, 2, 9, 8, 6, 4, 1, 1, 1, 6, 6, 4, 9, 2, 9, 2, 8, 2, 9, 1, 6, 1, 3, 2,
            9, 1, 4, 6, 1, 7, 8, 6, 6, 1, 1, 1, 9, 1, 2, 8, 1, 4, 1, 3, 5, 8, 2, 8, 8, 7, 2, 7, 1,
            8, 3, 1, 1, 9, 2, 1, 2, 5, 3, 6, 6, 1, 3, 9, 1, 9, 7, 1, 1, 6, 4, 1, 1, 7, 1, 4, 1, 8,
            7, 3, 1, 3, 7, 2, 1, 1, 4, 3, 3, 1, 9,
        ],
        vec![
            3, 1, 3, 7, 3, 2, 1, 2, 8, 6, 1, 8, 1, 7, 7, 3, 3, 2, 3, 2, 9, 7, 5, 9, 9, 1, 4, 1, 9,
            1, 1, 5, 8, 9, 6, 1, 3, 2, 1, 4, 3, 3, 3, 7, 2, 4, 7, 1, 5, 7, 2, 1, 7, 7, 1, 3, 2, 6,
            9, 6, 2, 7, 1, 6, 8, 3, 3, 2, 5, 1, 2, 8, 9, 7, 3, 1, 1, 2, 1, 4, 1, 7, 1, 1, 4, 3, 1,
            1, 9, 2, 9, 4, 3, 2, 9, 2, 3, 1, 4, 1,
        ],
        vec![
            4, 4, 7, 1, 5, 9, 1, 6, 4, 3, 4, 2, 9, 4, 1, 2, 5, 3, 2, 2, 1, 2, 4, 1, 2, 9, 2, 1, 8,
            9, 1, 2, 6, 2, 2, 2, 6, 7, 3, 4, 3, 2, 3, 5, 1, 4, 2, 5, 9, 1, 1, 2, 9, 8, 2, 7, 2, 7,
            6, 1, 6, 3, 1, 5, 9, 3, 3, 9, 1, 1, 2, 9, 9, 1, 4, 2, 5, 2, 2, 3, 8, 2, 7, 4, 9, 5, 9,
            5, 2, 1, 9, 8, 9, 3, 7, 7, 4, 2, 1, 3,
        ],
        vec![
            8, 3, 6, 1, 4, 3, 4, 4, 3, 7, 2, 7, 1, 4, 4, 6, 1, 1, 1, 5, 3, 1, 1, 6, 3, 7, 3, 9, 8,
            3, 2, 7, 4, 1, 7, 2, 3, 9, 9, 1, 1, 9, 1, 3, 6, 9, 2, 1, 5, 8, 9, 5, 1, 2, 1, 4, 7, 2,
            2, 4, 9, 7, 1, 3, 8, 5, 9, 4, 1, 1, 7, 1, 1, 3, 8, 2, 8, 2, 2, 9, 3, 1, 1, 4, 9, 3, 2,
            9, 5, 1, 6, 3, 8, 4, 8, 5, 8, 8, 1, 3,
        ],
        vec![
            7, 1, 6, 2, 1, 5, 1, 3, 7, 6, 9, 9, 5, 1, 3, 8, 9, 7, 7, 9, 1, 4, 2, 4, 2, 2, 3, 2, 9,
            1, 2, 2, 6, 3, 9, 2, 1, 4, 3, 1, 2, 6, 3, 8, 2, 4, 1, 1, 6, 4, 1, 1, 2, 3, 7, 1, 1, 5,
            1, 7, 9, 8, 4, 7, 8, 1, 6, 8, 7, 1, 7, 4, 5, 7, 3, 6, 2, 1, 6, 4, 8, 4, 2, 1, 5, 1, 7,
            3, 8, 2, 1, 4, 5, 3, 6, 9, 1, 8, 1, 4,
        ],
        vec![
            1, 2, 2, 1, 4, 1, 2, 3, 5, 2, 9, 7, 6, 4, 4, 5, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 9, 5, 4,
            7, 6, 1, 9, 6, 9, 9, 1, 3, 2, 6, 3, 8, 9, 8, 8, 1, 6, 1, 5, 4, 1, 2, 2, 1, 2, 2, 8, 6,
            9, 6, 7, 5, 4, 8, 9, 5, 5, 8, 5, 7, 1, 3, 1, 2, 7, 9, 1, 2, 6, 2, 6, 4, 1, 1, 6, 7, 1,
            1, 1, 2, 4, 6, 6, 8, 3, 3, 4, 8, 9, 1,
        ],
        vec![
            6, 9, 8, 2, 4, 3, 4, 6, 4, 5, 8, 6, 5, 3, 6, 6, 3, 9, 8, 4, 1, 3, 5, 4, 2, 1, 2, 2, 2,
            1, 9, 7, 7, 2, 3, 6, 8, 6, 5, 8, 4, 6, 3, 7, 4, 2, 6, 3, 1, 1, 2, 1, 9, 6, 3, 3, 1, 3,
            8, 1, 4, 9, 2, 9, 8, 1, 1, 1, 9, 3, 1, 9, 7, 2, 8, 2, 5, 2, 4, 2, 4, 3, 2, 9, 3, 2, 3,
            3, 2, 4, 6, 4, 4, 5, 6, 1, 1, 6, 1, 8,
        ],
    ];

    // This is the directed graph we're going to use.
    // The node numbers correspond to the different states,
    // and the edge weights symbolize the cost of moving
    // from one node to another.
    // Note that the edges are one-way.
    //
    //                  7
    //          +-----------------+
    //          |                 |
    //          v   1        2    |  2
    //          0 -----> 1 -----> 3 ---> 4
    //          |        ^        ^      ^
    //          |        | 1      |      |
    //          |        |        | 3    | 1
    //          +------> 2 -------+      |
    //           10      |               |
    //                   +---------------+
    //
    // The graph is represented as an adjacency list where each index,
    // corresponding to a node value, has a list of outgoing edges.
    // Chosen for its efficiency.
    let graph = to_risk_graph(&risks);

    println!("Part One: {}", shortest_path(&graph, 0, graph.len() - 1));

    let risks = tile_risks(risks);
    let graph = to_risk_graph(&risks);
    println!("Part Two: {}", shortest_path(&graph, 0, graph.len() - 1));
}

fn to_risk_graph(risks: &Vec<Vec<usize>>) -> Vec<Vec<Edge>> {
    let mut count = 0;
    for y in 0..risks.len() {
        count += risks[y].len();
    }

    let mut graph = vec![vec![]; count];
    for y in 0..risks.len() {
        for x in 0..risks[y].len() {
            if x > 0 {
                let from_index = y * risks[y].len() + x;
                let to_index = y * risks[y].len() + x - 1;
                graph[from_index].push(Edge {
                    node: to_index,
                    cost: risks[y][x - 1],
                });
            }
            if x < risks[y].len() - 1 {
                let from_index = y * risks[y].len() + x;
                let to_index = y * risks[y].len() + x + 1;
                graph[from_index].push(Edge {
                    node: to_index,
                    cost: risks[y][x + 1],
                });
            }
            if y > 0 {
                let from_index = y * risks[y].len() + x;
                let to_index = (y - 1) * risks[y].len() + x;
                graph[from_index].push(Edge {
                    node: to_index,
                    cost: risks[y - 1][x],
                });
            }
            if y < risks.len() - 1 {
                let from_index = y * risks[y].len() + x;
                let to_index = (y + 1) * risks[y].len() + x;
                graph[from_index].push(Edge {
                    node: to_index,
                    cost: risks[y + 1][x],
                });
            }
        }
    }
    graph
}

fn tile_risks(risks: Vec<Vec<usize>>) -> Vec<Vec<usize>> {
    let mut new_risks = vec![vec![0; risks.len() * 5]; risks.len() * 5];
    for y in 0..5 {
        for x in 0..5 {
            copy_risks(
                &risks,
                &mut new_risks,
                x * risks.len(),
                y * risks.len(),
                x + y,
            );
        }
    }
    new_risks
}

fn copy_risks(
    source: &Vec<Vec<usize>>,
    target: &mut Vec<Vec<usize>>,
    offset_x: usize,
    offset_y: usize,
    risk_offset: usize,
) {
    for y in 0..source.len() {
        for x in 0..source[y].len() {
            let target_x = x + offset_x;
            let target_y = y + offset_y;
            target[target_y][target_x] = match source[y][x] + risk_offset {
                10.. => source[y][x] + risk_offset - 9,
                _ => source[y][x] + risk_offset,
            };
        }
    }
}

// fn dijkstra(risk_graph: &HashMap<Edge, usize>, start: Vertex, end: Vertex) -> usize {
//     let mut vertex_queue = BinaryHeap::new();
//     let mut distance: HashMap<Vertex, Option<usize>> = HashMap::new();
//     let mut previous: HashMap<Vertex, Option<Vertex>> = HashMap::new();
//     println!("Filling vertices...");
//     for vertex in risk_graph.keys() {
//         vertex_queue.insert(vertex.from);
//         distance.insert(vertex.from, None);
//         previous.insert(vertex.from, None);
//     }
//     *distance.entry(start).or_insert(None) = Some(0);
//     println!("Calculating...");
//     while !vertex_queue.is_empty() {
//         if vertex_queue.len() % 1000 == 0 {
//             println!("{}", vertex_queue.len());
//         }
//         let vertex_with_smallest_distance = *vertex_queue
//             .iter()
//             .map(|vertex| (vertex, distance[vertex]))
//             .min_by(|(_vertex_a, distance_a), (_vertex_b, distance_b)| {
//                 if distance_a.is_none() && distance_b.is_none() {
//                     Ordering::Equal
//                 } else if distance_a.is_none() && distance_b.is_some() {
//                     Ordering::Greater
//                 } else if distance_a.is_some() && distance_b.is_none() {
//                     Ordering::Less
//                 } else {
//                     distance_a.unwrap().cmp(&distance_b.unwrap())
//                 }
//             })
//             .unwrap()
//             .0;
//         vertex_queue.remove(&vertex_with_smallest_distance);
//         let neighbors = risk_graph.iter().filter_map(|(edge, _risk)| {
//             if edge.from == vertex_with_smallest_distance && vertex_queue.contains(&edge.to) {
//                 Some(edge.to)
//             } else {
//                 None
//             }
//         });
//         for neighbor in neighbors {
//             let new_distance = distance[&vertex_with_smallest_distance].unwrap()
//                 + risk_graph[&Edge {
//                     from: vertex_with_smallest_distance,
//                     to: neighbor,
//                 }];
//             if distance[&neighbor].is_none() || new_distance < distance[&neighbor].unwrap() {
//                 *distance.entry(neighbor).or_insert(None) = Some(new_distance);
//                 *previous.entry(neighbor).or_insert(None) = Some(vertex_with_smallest_distance);
//             }
//         }
//     }
//     println!("Backtracking...");
//     let mut total_risk = 0;
//     let mut current = end;
//     loop {
//         // println!("{:?}", current);
//         if current == start {
//             break;
//         }
//         let next = previous[&current].unwrap();
//         total_risk += risk_graph[&Edge {
//             from: next,
//             to: current,
//         }];
//         current = next;
//     }
//     total_risk
// }
